Before getting into GraphQL and Falcor, we should know what REST API is and how it transformed the way of communication between systems for many years. Primarily API stands for Application Programming Interface, and it allows any software to talk with each other. There are different types of API available, but here in the context of GraphQL and Falcor, we consider REST API (REpresentational State Transfer API).  Fundamentally, REST API works in the same way as how websites work. A client sends a request to the server over HTTP protocol, and the client gets an HTML page as a response and browser renders the page. In REST API, the server sends a JSON (Javascript Object Notation) response instead of HTML page. The JSON response might be unreadable to humans, but it is readable by machines. Then the client program parses the response and performs any actions on the data as they wish. 

"The image goes here to show how the server returns a JSON response in the restful API call."

This architecture looks perfect for fetching the data from the server but what are the limitations in this architecture that give space for the emergence of frameworks like GraphQL and Falcor?

1. The client has to make recurring round trips to the server to fetch the required data.
2. Various endpoints for different resources which make complication between developers and challenging to manage them on server and client side in big projects.
3. Over Fetching, means there is no way to control the response to include only a subset of fields which bloats the response size and may cause network traffic.
4. No static type validation on data sent or received.

In the later sections, we see how GraphQL and Falcor address the limitations in their approach.

GraphQL
GraphQL is a Query Language developed by Facebook to fetch the data from the database unlike the traditional way of making REST API requests. Technically, GraphQL replaces the use of REST API calls with a single endpoint on the server. Single endpoint architecture solves various communication difficulties between client and server side team members. 

Features:
Single roundtrip:
GraphQL helps to fetch all the data we required in a single request. For example, consider a scenario in the below figure where we need to get top 10 robots and sensors attached to it. 

"Figure goes here."

In traditional REST approach, the client has to make a series of individual requests to get all 10 robot information and later client makes another round of requests to get the sensor data. This consumes too many network resources by making multiple roundtrips. 
On the other hand, GraphQL client attaches the required fields and their additional related fields in a single request which reduces the usage of network resources tremendously.  

- Declarative:
The client decides the fields that should be available in the query response. GraphQL doesn't give less or more than what the client asks for.  Declarative approach solves the over fetching issue in REST API. Also, we can say that GraphQL follows under fetching approach. 

"Diagram goes here."

Let's consider an example to see the variance between these two approaches. Think we have a database that contains a list of robot information such as name, description, mac_address, context, manufacturer information, type, weight, etc. and we would like to query only for name and mac_address of all the robots. 

In the above figure, the REST client requests to the server to get all the robots and server returns with a list of robots as a response but each robot object in the response consists of every information belongs to it. Now the client has to handpick the only required fields from the response. 
Adding $include=name,mac_address queries along with the GET request might solve this issue. However, this is overburden in terms of often rewriting code in the server for every change from the client.   
GraphQL solves this over fetching issue in zero configuration in the server side. On the right side figure, GraphQL client request for name and mac_address of all robots exclusively, and GraphQL server automagically responds a list of robots only with name and mac_address. In the end, it saves time on rewriting code on the server, and most importantly reduces the load on the network layer.

- Single endpoint:
GraphQL exposes a single endpoint for all available services from the backend. This overcomes the REST API multiple routes and each exposes a single resource.  

For example, consider we need to get a list of robots and sensors in two different network calls. In typical REST API architecture, we would have two separate routes as shown below.

"/robots" & "/sensors"

In GraphQL world, we define only one route, and we send the queries to the server over the single URL.

Strongly typed validation:
Strong type system in GraphQL validates the incoming query for data types and prevent prematurely even before sending the queries to the database. Also, it makes sure that the client sends the right data and also the client can expect the data in the same way. 

Multiple data sources:
GraphQL creates an abstraction layer between clients and the databases used in the backend. This feature allows the service provides to use any number of data sources and GraphQL fetches the relevant data from all data sources and returns the required fields to the client side. 

"GraphQL with multiple database figure goes here."

This is one of the primary reason why we considered GraphQL as a base to our mediator system. Because it is always not sure how the robots store the sensor data and which database is used. In a typical scenario, multi robots might use various databases to store similar sensor entities.

Caching:
Usually, the browser caches the responses for different routes, and if the client makes a similar request, the browser gets the data locally. However, it is not possible directly since GraphQL uses single route endpoint. Without caching, GraphQL would be inefficient, but there are other libraries in the community which handles the caching in the client side. The popular libraries are Apollo and FlacheQL, and they store the requests and responses in the simple local storage in the form of a normalized map [ref 1].


ref 1: https://blog.usejournal.com/caching-with-graphql-what-are-the-best-options-e161b0f20e59

Falcor:
Falcor is a framework similar developed by Netflix for their internal use, and later they make it available as open source. Unlike GraphQL, Falcor doesn't emphasize users to provide a schema, rather Falcor generates a schema from the given data as a single Virtual JSON object [ref 2]. It uses "One Model Everywhere [ref 2]" policy to model all the backend data into a single json file.

Falcor and GraphQL share a lot of similarities like data demand driven architecture, single endpoint, single roundtrip, and under fetching.

ref 2: https://netflix.github.io/falcor/starter/what-is-falcor.html

